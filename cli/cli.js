#!/usr/bin/env node

import { program } from "commander";
import { red } from "colorette";
import inquirer from "inquirer";
import axios, {AxiosError} from "axios";
import * as fs from "node:fs";
import {getAllAudioScenario} from "./scenarios/get-all-audio.scenario.js";
import {controller, vkApiService} from "../lib/vk-api.service.js";
import chalk from 'chalk';
import * as path from "node:path";

program.version("1.0.0").description("VK Audio Downloader");

function catchApiError(err, spinner) {
  if (err.code === 'ECONNREFUSED') {
    spinner.fail(`API is not reachable. Check servers or try again later.`);
    return;
  }
  if (err instanceof AxiosError) {
    spinner.fail(`API error: ${err.message}. ${JSON.stringify(err.response?.data || {})}`);
  }
}

async function retry(spinner, func, error) {
  catchApiError(error, spinner)

  const { choice } = await inquirer.prompt([
    {
      type: "list",
      name: "choice",
      message: "Retry?",
      choices: ["Yes", "No"],
    },
  ]);

  if (choice === "Yes") {
    await func(spinner);
  }
}

async function getSaveFolder(config) {
  const { savePath } = await inquirer.prompt([
    {
      type: "input",
      name: "savePath",
      message: "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: ",
    },
  ]);

  config['save_path'] = path.resolve(savePath);
  fs.writeFileSync('./config.json', JSON.stringify(config));
}

function authorInfo() {
  const getRandomColor = () => {
    const colors = ['cyan', 'green', 'red'];
    return colors[Math.floor(Math.random() * colors.length)];
  }

  const data = {
    title: chalk[getRandomColor()]('CLI VK Audio Downloader (aka –°–∫–∞—á–∏–≤–∞—Ç–µ–ª—å –ú—É–∑—ã–∫–∏ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ -_-)'),
    author: chalk[getRandomColor()]('   Vladimir Taburkin (–í–ª–∞–¥–∏–º–∏—Ä –¢–∞–±—É—Ä–∫–∏–Ω)'),
    github: '  https://github.com/VACdotCS',
  }

  console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${data.title}`);
  console.log(`–ê–≤—Ç–æ—Ä: ${data.author}`);
  console.log(`–ì–∏—Ç—Ö–∞–±: ${data.github}\n`);
}

program.action(async () => {
  try {
    authorInfo();
    let config = await new Promise(async (resolve, reject) => {
      fs.readFile('./config.json', (err, data) => {
        if (err) {
          resolve(null);
          return;
        }

        if (!data) {
          resolve(null);
          return;
        }

        resolve(JSON.parse(data.toString()));
      })
    });

    if (config === null) {
      fs.writeFileSync('./config.json', JSON.stringify({}));
      config = {};
    }

    const { musicLink } = await inquirer.prompt([
      {
        type: "input",
        name: "musicLink",
        message: "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –í–ö id (–≥–∞–π–¥ —Ç—É—Ç): ", // TODO: –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∞–π–¥, –∫–∞–∫ –¥–æ—Å—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω/id
      },
    ]);

    const userId = parseInt(musicLink.split('audios')[1]);

    const { accessToken } = await inquirer.prompt([
      {
        type: "input",
        name: "accessToken",
        message: "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π access token (–≥–∞–π–¥ —Ç—É—Ç): ", // TODO: –í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥–∞–π–¥, –∫–∞–∫ –¥–æ—Å—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω/id
      },
    ]);

    console.log(config);

    if (!config['save_path']) {
      await getSaveFolder(config);
    }

    //TODO: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Å–µ—Ç—Ç–µ—Ä—ã –ø—Ä—è–º–æ
    if (!userId || !accessToken) {
      console.log(red("‚ùå –¢–æ–∫–µ–Ω –∏–ª–∏ id –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ"));
      process.exit(1);
    }

    vkApiService.setAccessToken(accessToken);
    vkApiService.setUserId(userId);

    const choices = [
      "–°–∫–∞—á–∞—Ç—å –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞",
      "–°–∫–∞—á–∞—Ç—å –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã",
      "–°–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫ –ø–æ —Å—Å—ã–ª–∫–µ",
      "–°–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ —Å—Å—ã–ª–∫–µ",
      "–°–∫–∞—á–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –¥—Ä—É–≥–∞",
      "–ü–æ–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
      "–ò–∑–º–µ–Ω–∏—Ç—å –ø—É—Ç—å –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è",
      "–í—ã–≤–µ—Å—Ç–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ —Ä–µ–≥–∏–æ–Ω–µ —Ç—Ä–µ–∫–∏",
      "–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à (—É–¥–∞–ª–∏—Ç –≤—Å—ë, –∫—Ä–æ–º–µ –ø—É—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤)"
    ];

    const { choice } = await inquirer.prompt([
      {
        type: "list",
        name: "choice",
        message: "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
        choices
      },
    ]);

    if (choice === choices[0]) {
      await getAllAudioScenario(config['save_path']);
    }

    if (choice === choices[5]) {
      await getSaveFolder(config);
    }
  } catch (e) {
    console.log(e);
    console.log(red("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"));
  }
});

process.on("SIGINT", () => {
  console.log(red("\nüõë –í—ã –Ω–∞–∂–∞–ª–∏ CTRL+C, —Ç–µ–º —Å–∞–º—ã–º –∑–∞–∫—Ä—ã–≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"));
  controller.abort();
  process.exit(0);
});

program.parse(process.argv);